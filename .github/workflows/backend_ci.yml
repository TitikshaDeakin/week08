name: Backend CI - Test, Build and Push Images to ACR

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'
  workflow_dispatch:

# minimal, explicit permissions (prep for later OIDC work)
permissions:
  contents: read
  id-token: write
  packages: write

# cancel stale runs on same ref
concurrency:
  group: backend-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  # e.g. myregistry.azurecr.io
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  test_and_lint_backends:
    runs-on: ubuntu-latest

    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install tooling & deps
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy pytest httpx
          # Single-service or multi-service deps:
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
          for req in backend/*/requirements.txt; do [ -f "$req" ] && pip install -r "$req"; done

      - name: Lint (ruff)
        run: ruff check backend/ || true

      - name: Type-check (mypy)
        run: mypy backend/ || true

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

  build_and_push_images:
    # do not build/push images on PR validation
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    needs: test_and_lint_backends

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug ACR login server
        run: echo "Using ACR login server:${{ env.ACR_LOGIN_SERVER }}"

      - name: Docker login to ACR
        shell: bash
        run: |
          if [ -z "${{ env.ACR_LOGIN_SERVER }}" ]; then
            echo "ACR_LOGIN_SERVER is empty. Check secret AZURE_CONTAINER_REGISTRY."
            exit 1
          fi
          echo "${{ secrets.ACR_PASSWORD }}" | docker login "${{ env.ACR_LOGIN_SERVER }}" \
            -u "${{ secrets.ACR_USERNAME }}" --password-stdin

      - name: Build and Push Product Service Image
        shell: bash
        run: |
          docker build -t "${{ env.ACR_LOGIN_SERVER }}/product_service:latest" \
                       -t "${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}" \
                       ./backend/product_service/
          docker push "${{ env.ACR_LOGIN_SERVER }}/product_service:latest"
          docker push "${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}"

      - name: Build and Push Order Service Image
        shell: bash
        run: |
          docker build -t "${{ env.ACR_LOGIN_SERVER }}/order_service:latest" \
                       -t "${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}" \
                       ./backend/order_service/
          docker push "${{ env.ACR_LOGIN_SERVER }}/order_service:latest"
          docker push "${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}"

      - name: Docker logout
        if: always()
        run: docker logout "${{ env.ACR_LOGIN_SERVER }}"
