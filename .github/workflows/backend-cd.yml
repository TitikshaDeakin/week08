name: Backend CD - Deploy Backend Services to AKS

on:
  workflow_run:
    workflows: ["Backend CI - Test, Build and Push Images to ACR"]
    types: [completed]

permissions:
  contents: read
  id-token: write

jobs:
  deploy_backend:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Kubeconfig setup (kept for compatibility; OIDC upgrade is a later fix) ---
      - name: Configure kubeconfig (if secret present)
        id: kubeconf
        shell: bash
        run: |
          set -euo pipefail
          if [[ -n "${{ secrets.KUBECONFIG_B64 }}" ]]; then
            mkdir -p ~/.kube
            echo "${{ secrets.KUBECONFIG_B64 }}" | base64 --decode > ~/.kube/config
            echo "configured=true" >> "$GITHUB_OUTPUT"
          else
            echo "No kubeconfig secret found; will skip cluster actions."
            echo "configured=false" >> "$GITHUB_OUTPUT"
          fi

      # --- Probe cluster connectivity (don’t fail the job if cluster doesn’t exist) ---
      - name: Verify cluster connection (non-fatal)
        id: ping
        shell: bash
        run: |
          set +e
          if [[ "${{ steps.kubeconf.outputs.configured }}" != "true" ]]; then
            echo "reachable=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          kubectl version --short >/dev/null 2>&1
          rc=$?
          if [[ $rc -eq 0 ]]; then
            echo "reachable=true" >> "$GITHUB_OUTPUT"
          else
            echo "reachable=false" >> "$GITHUB_OUTPUT"
          fi
          exit 0

      # --- Deploy infra + services only if cluster is reachable ---
      - name: Deploy backend infrastructure (ConfigMaps, Secrets, DBs)
        if: ${{ steps.ping.outputs.reachable == 'true' }}
        run: |
          set -euo pipefail
          kubectl apply -f k8s/configmaps.yaml
          kubectl apply -f k8s/secrets.yaml || true
          kubectl apply -f k8s/product-db.yaml
          kubectl apply -f k8s/order-db.yaml

      - name: Deploy backend microservices (Product, Order)
        if: ${{ steps.ping.outputs.reachable == 'true' }}
        run: |
          set -euo pipefail
          kubectl apply -f k8s/product-service.yaml
          kubectl apply -f k8s/order-service.yaml

      # --- Rollout validation (hard fail if rollout doesn’t stabilize) ---
      - name: Validate rollouts
        if: ${{ steps.ping.outputs.reachable == 'true' }}
        run: |
          set -euo pipefail
          kubectl rollout status deployment/product-service --timeout=120s
          kubectl rollout status deployment/order-service  --timeout=120s

      # --- Capture external IPs into the summary for easy debugging ---
      - name: Capture service external IPs
        id: ips
        if: ${{ steps.ping.outputs.reachable == 'true' }}
        shell: bash
        run: |
          PRODUCT_IP=$(kubectl get svc product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
          ORDER_IP=$(kubectl get svc order-service-w08e1  -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
          echo "product_ip=${PRODUCT_IP}" >> "$GITHUB_OUTPUT"
          echo "order_ip=${ORDER_IP}"   >> "$GITHUB_OUTPUT"

      - name: Job summary
        if: ${{ steps.ping.outputs.reachable == 'true' }}
        run: |
          {
            echo "## Backend CD Summary"
            echo ""
            echo "- Product Service IP: **${{ steps.ips.outputs.product_ip || 'pending' }}**"
            echo "- Order Service IP: **${{ steps.ips.outputs.order_ip   || 'pending' }}**"
            echo ""
            echo "_Rollout validated via \`kubectl rollout status\`._"
          } >> "$GITHUB_STEP_SUMMARY"

      # --- Graceful summary when cluster is not reachable (keeps run green) ---
      - name: Job summary (no cluster)
        if: ${{ steps.ping.outputs.reachable != 'true' }}
        run: |
          {
            echo "## Backend CD Summary"
            echo ""
            echo "> Skipped cluster actions because no kubeconfig/cluster was available."
            echo "> (Resources were intentionally cleaned up for this assignment.)"
          } >> "$GITHUB_STEP_SUMMARY"
